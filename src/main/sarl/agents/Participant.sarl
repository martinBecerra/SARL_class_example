package agents
/** 
 * 
 */

import behaviors.NormalBidderBehavior
import events.AuctionWinner
import io.sarl.core.Behaviors
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging

/** 
 * @author martin
 * 
 */
agent Participant {
	uses Logging
	uses Behaviors
	uses Lifecycle
	
	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("Participant agent was started.")
		this.behaviorsSetup()
		
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}
	
	
	private def behaviorsSetup() {
		
		val bidderBeh = new NormalBidderBehavior(this)
		registerBehavior(bidderBeh)
	}

	on AuctionWinner {
		killMe
	}
}
