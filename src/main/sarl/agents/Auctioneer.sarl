package agents
/** 
 * 
 */

import behaviors.BidReceiverBehaviour
import io.sarl.core.AgentKilled
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.util.Random
import java.util.UUID
import objects.Product
import skills.SessionManagement
import skills.SessionManagementSkill
import spaces.AuctionSpace
import spaces.AuctionSpaceSpecification

/** 
 * @author martin
 * 
 */
agent Auctioneer {
	uses Logging
	uses Lifecycle
	uses SessionManagement
	uses DefaultContextInteractions
	uses InnerContextAccess
	uses Behaviors
	
	var product 	    : Product
	var initialBidValue : double
	var auctionSpace 	: AuctionSpace
	
	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("Auctioneer agent was started.")
		
		this.productExtraction(occurrence.parameters)
		this.initialValueSetup()
		this.auctionSpaceSetup()
		this.skillSetup()
		this.behaviorsSetup()
		this.spawnParticipants()
		startAuction(product,randomInitialOffer)
	}

	on AgentKilled{
		
		synchronized (this) {
			if (hasMemberAgent == false) {
				killMe
			}
		}
	}
	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	synchronized private def productExtraction(parameters : Object[]) {
		val product = parameters.get(0) as Product
		this.product = product;
	}

	synchronized private def initialValueSetup() {
		
			this.initialBidValue = this.randomInitialOffer()	
	}

	synchronized private def auctionSpaceSetup() {
		val uid = UUID.randomUUID
		this.auctionSpace = defaultContext.createSpace(AuctionSpaceSpecification, uid)
		val eventSpace = innerContext.defaultSpace
		this.auctionSpace.configureAuction(this.ID, product, initialBidValue, eventSpace)	
	}

	private def skillSetup() {
		
		val sessionManSkill = new SessionManagementSkill()
		this.setSkill(sessionManSkill,SessionManagement)
	}

	synchronized private def behaviorsSetup() {
		val receiverBehavior = new BidReceiverBehaviour(this)
		receiverBehavior.configure(this.auctionSpace)
		registerBehavior(receiverBehavior)	
	}
	
	private def spawnParticipants() {
		
		 for (var i : int = 0; i < 6; i++) {
			spawnInContext(Participant, innerContext)
		 }
	}

	private def randomInitialOffer() : double {
		var random : Random = new Random()
		val absRand = Math.abs(random.nextLong())
		
		return absRand % 2000
	}

}
