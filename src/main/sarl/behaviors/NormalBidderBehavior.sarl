/** 
 * 
 */
package behaviors

import events.AuctionFinished
import events.AuctionWinner
import events.Bid
import events.BidBaseChanged
import events.StartAuction
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import java.util.Random

/** 
 * @author martin
 * 
 */
behavior NormalBidderBehavior {
	uses Logging
	uses DefaultContextInteractions
	
	var isAuctionOpened:boolean
	
	on Initialize {
		// Event trigger before the behavior begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("The behavior was started.")
	}

	on Destroy {
		// Event trigger when the behavior is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The behavior was stopped.")
	}

	on StartAuction {
		
		synchronized (this) {
			this.isAuctionOpened = true
			val bidBase = occurrence.initialBid
			this.performBidOffer(bidBase)
		}
	}
	on AuctionFinished {
		synchronized (this) {
			this.isAuctionOpened = false
		}
		
	}
	
	on BidBaseChanged [this.isAuctionOpened == true] {
		synchronized (this) {
			val bidBase = occurrence.value;
			this.performBidOffer(bidBase)
		}
	}
	
	on AuctionWinner {

		val myIdStr = this.ID.toString
		val winnerStr = occurrence.winnerName
		val prize = occurrence.prod

		if (myIdStr.equals(winnerStr)) {
			info("I won " + prize.name)
		}
	}
	
	private def performBidOffer(bidBase : double) {
		
		var maxPercentOffer = bidBase * 0.2
		val random = new Random
		var randomOffer = random.nextLong % maxPercentOffer
		val bidOffer = bidBase + randomOffer

		val bidOfferEvent = new Bid(bidOffer);
		
		defaultSpace.emit(this.ID, bidOfferEvent)
		
		info("agent " + this.ID + " makes an offer of " + bidOffer)
	}
}
