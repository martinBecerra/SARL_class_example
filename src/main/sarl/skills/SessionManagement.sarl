/** 
 * 
 */
package skills

import events.AuctionFinished
import events.StartAuction
import io.sarl.core.Logging
import io.sarl.core.Schedules
import io.sarl.util.OpenEventSpace
import objects.Product
import io.sarl.core.InnerContextAccess
import io.sarl.lang.core.EventSpace

/** 
 * @author martin
 * 
 */
capacity SessionManagement {
	def startAuction(product : Product, randomOffer : double)
	def stopAuction()
}

skill SessionManagementSkill implements SessionManagement {
	uses Schedules
	uses Logging
	uses InnerContextAccess
	
 	var product    : Product
	var eventSpace : EventSpace
	 
	new () {
		
	}
	
	def startAuction(product : Product, randomOffer : double) {

		this.eventSpace = innerContext.defaultSpace
		
		this.product = product
		
		val startEvent  = new StartAuction(product,randomOffer)
		
		this.eventSpace.emit(this.ID, startEvent)
		
		info("Auction started - Base bid Offer: "+ randomOffer)
		
		this.taskFinishAuctionSetup()
	}
	
	def stopAuction {
		val finishEvent = new AuctionFinished()
		this.eventSpace.emit(this.ID, finishEvent)
		info("Auction finished")
	}
	
	private def taskFinishAuctionSetup() {

		val task = task("close_auction_task")
		
		task.in(1000) [
			this.stopAuction
			info("Task fired")
		]
		
	}
}
